BY PRIORITY (ISH)

    Something is off with modeling. Low util values, likely because low predicted action
    prob. Except that all possible actions should be accounted for. And the heuristics
    should be close to the actual value. What I see:
        - only one child, and it has decent util (71.48)
        - parent node has expected util of 0.72, indicating ~ 0.01 * 71.48
        - possible place to look: is expand_leaf expanding ALL possible actions?
            + No. It does not.
            + Two possible solutions:
                -> expand all possible actions
                -> normalize action probs based on which HAVE been expanded

    Adjust planner to add horizon to state rep, not rely on scenario to have such.
        - extend state with '_horizon'
        - make sure to adjust tree map for non-planner uses (so they don't have to deal with states containing _horizon)
        -

    Thoughts on comm strategies:
        - Exact (not scalable) vs greedy
        - Limit communication content: limited states considered (what to communicate paper)
        - Limit computation: Heuristic: Util x Info x likelihood of state
        - Limit search space: Limiting to similar payoffs
        - Alternate strategy (like conditional value at risk): Maximizing expected util vs raise lower bound on util.

    Domains
        StarCraft
            Note: will have to figure out queue in scenario; also, caps for research (cannot keep researching same thing over and over)
            Evaluation? Battle simulator? Heuristic? Match to one or more possible goals?
        Small domains:
            Multi-armed bandit (introduce conflict in same bandit? shared obs? someone explores while the other exploits?)
            Cooperative flocking (various roles?)
            Blocks world (tagged blocks which can only be moved by certain agent)
            Traditional pursuit?
            Generated MDP (Noa Agmon's work "Leading Ad Hoc Agents...")

    Plan-space reasoning
        Comm evaluation
        Comm planning

    Visualization
        Improving x coordinates never improves overall structure.

    Cython
        MDP planner (thts_dp)? Profile first.
        Domain scenarios - state transitions are likely a major factor

    Models - for agents
        Barrett model?
        SC build orders or other learning?

    Documentation
        Use docstring convention from Google ( https://google.github.io/styleguide/pyguide.html# Comments )
            Can be set by PyCharm in settings, tools, python integrated tools, docstring format


Nice to have, but completely beyond the scope of the current project.
    Tree/graph abstraction for all solvers (fits a generic visualization framework too!)

    Profiling and unit tests

    Debug
        - use logging module http://inventwithpython.com/blog/2012/04/06/stop-using-print-for-debugging-a-5-minute-quickstart-guide-to-pythons-logging-module/

    Multiprocessing
        - far advanced, but consider doing something parallel. You know, maybe you should do an initial search until X
        branches, where X = #processors, then have each process handle a subtree. That's interesting. Probably not a huge
        gain, however. Doesn't keep the philosophy of put more resources into Y process because it is more promising. As
        X -> inf, you just have breadth first search.

    Authoring - POMDP file input

    Hierarchical Graph Reduction (maybe keep for second PhD :P)
        Epsilon merging
        Multi-level graph partitioning

